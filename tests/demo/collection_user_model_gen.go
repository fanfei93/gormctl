// Code generated by gormctl. DO NOT EDIT!

package model

import (
	"gorm.io/gorm"
	"time"
)

type (
	collectionUserModel interface {
		Insert(data *CollectionUser) (*CollectionUser, error)
		FindOne(id int64) (*CollectionUser, error)
		UpdateByID(data *CollectionUser) (*CollectionUser, error)
		Delete(id int64) error
	}

	defaultCollectionUserModel struct {
		*gorm.DB
	}

	CollectionUser struct {
		ID                int       `gorm:"column:id" json:"id"`                                   // 用户表id
		UID               string    `gorm:"column:uid" json:"uid"`                                 // 用户uid
		NickName          string    `gorm:"column:nick_name" json:"nick_name"`                     // 用户昵称
		HeadImg           string    `gorm:"column:head_img" json:"head_img"`                       // 头像
		Phone             string    `gorm:"column:phone" json:"phone"`                             // 手机号码
		InviteCode        string    `gorm:"column:invite_code" json:"invite_code"`                 // 邀请码
		EthAddress        string    `gorm:"column:eth_address" json:"eth_address"`                 // 链上地址
		Cert              string    `gorm:"column:cert" json:"cert"`                               // 证书
		PrivateKey        string    `gorm:"column:private_key" json:"private_key"`                 // 私钥
		PrivateKeyEncrypt string    `gorm:"column:private_key_encrypt" json:"private_key_encrypt"` // 加密私钥
		IritaAddr         string    `gorm:"column:irita_addr" json:"irita_addr"`                   // irita账户地址
		OpenDdc           int8      `gorm:"column:open_ddc" json:"open_ddc"`                       // 是否接入官方ddc合约
		IsApproved        int8      `gorm:"column:is_approved" json:"is_approved"`                 // 是否授权
		IDName            string    `gorm:"column:id_name" json:"id_name"`                         // 姓名
		IDNameEncrypt     string    `gorm:"column:id_name_encrypt" json:"id_name_encrypt"`         // 加密身份证姓名
		IDCard            string    `gorm:"column:id_card" json:"id_card"`                         // 身份证号
		IDCardEncrypt     string    `gorm:"column:id_card_encrypt" json:"id_card_encrypt"`         // 加密身份证号
		Birth             int       `gorm:"column:birth" json:"birth"`                             // 出生日期
		Gender            int8      `gorm:"column:gender" json:"gender"`                           // 性别：0-未知，1-男，2-女
		IsBan             uint8     `gorm:"column:is_ban" json:"is_ban"`                           // 封禁：1表示正常，2表示封禁
		IsCertified       uint8     `gorm:"column:is_certified" json:"is_certified"`               // 实名认证：1表示未认证，2表示已认证
		IsSubscribe       int8      `gorm:"column:is_subscribe" json:"is_subscribe"`               // 是否开启自动订阅
		CreateSource      int8      `gorm:"column:create_source" json:"create_source"`             // 来源： 1 h5 , 2 客户端
		RegID             string    `gorm:"column:reg_id" json:"reg_id"`                           // 设备id
		RegisterIP        string    `gorm:"column:register_ip" json:"register_ip"`                 // 注册ip地址
		RegisterRegion    string    `gorm:"column:register_region" json:"register_region"`         // 注册地区
		CertifiedTime     time.Time `gorm:"column:certified_time" json:"certified_time"`           // 注册时间
		CreateTime        time.Time `gorm:"column:create_time" json:"create_time"`                 // 创建时间
		UpdateTime        time.Time `gorm:"column:update_time" json:"update_time"`                 // 更新时间
		IsDelete          bool      `gorm:"column:is_delete" json:"is_delete"`                     // 软删除：1表示删除用户，2表示正常用户
	}
)

func newCollectionUserModel(conn *gorm.DB) *defaultCollectionUserModel {
	return &defaultCollectionUserModel{
		conn,
	}
}

func (m *CollectionUser) TableName() string {
	return "collection_user"
}

func (m *defaultCollectionUserModel) BeforeCreate(conn *gorm.DB) error {
	conn.Statement.SetColumn("Created_At", time.Now())
	return nil
}

func (m *defaultCollectionUserModel) Insert(data *CollectionUser) (*CollectionUser, error) {
	err := m.Model(&CollectionUser{}).Create(data).Error
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *defaultCollectionUserModel) FindOne(id int64) (*CollectionUser, error) {
	var data CollectionUser
	err := m.Model(&CollectionUser{}).First(&data, id).Error
	if err != nil {
		return nil, err
	}

	return &data, nil
}

func (m *defaultCollectionUserModel) BeforeUpdate(conn *gorm.DB) (err error) {
	// 如果任意字段有变更
	if conn.Statement.Changed() {
		conn.Statement.SetColumn("Updated_At", time.Now())
	}
	return nil
}

func (m *defaultCollectionUserModel) UpdateByID(data *CollectionUser) (*CollectionUser, error) {
	if data == nil {
		return nil, nil
	}

	err := m.Model(&CollectionUser{}).Where("id = ?", data.ID).Updates(data).Error
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *defaultCollectionUserModel) Delete(id int64) error {
	err := m.Model(&CollectionUser{}).Where("id = ?", id).Delete(&CollectionUser{}).Error

	return err
}
