package template

const (
	genBase = `// Code generated by gormctl. DO NOT EDIT!

package {{.PackageName}}

import (
    "gorm.io/gorm"
    "time"
    "context"
)

type (
    {{.InnerInterfaceName}} interface {
        Insert(ctx context.Context, data *{{.StructName}}) (*{{.StructName}}, error)
        FindOne(ctx context.Context, id int64, columns ...string) (*{{.StructName}}, error)
        Update(ctx context.Context, data *{{.StructName}}, columns ...string) (*{{.StructName}}, error)
		Save(ctx context.Context, data *{{.StructName}}) (*{{.StructName}}, error)
		Delete(ctx context.Context, data *{{.StructName}}) error
    }

    {{.DefaultModelName}} struct {
        *gorm.DB
    }

    {{.StructName}} struct { {{range $column := .Columns}}
        {{$column.ColumnName}} {{$column.ColumnType}} {{$column.ColumnTag}} {{$column.Comment}} {{end}}
    }
)

func new{{.OuterInterfaceName}}(conn *gorm.DB) *{{.DefaultModelName}} {
	return &{{.DefaultModelName}}{
		conn,
	}
}

func (m *{{.StructName}}) TableName() string {
    return "{{.TableName}}"
}

func (m *{{.DefaultModelName}}) Insert(ctx context.Context, data *{{.StructName}}) (*{{.StructName}}, error) {
    err := m.WithContext(ctx).Model(&{{.StructName}}{}).Create(data).Error
    if err != nil {
        return nil, err
    }

    return data, nil
}

func (m *{{.DefaultModelName}}) FindOne(ctx context.Context, id int64, columns ...string) (*{{.StructName}}, error) {
    var data {{.StructName}}
	var err error
	if len(columns) > 0 {
    	err = m.WithContext(ctx).Model(&{{.StructName}}{}).Select(columns).First(&data, id).Error
	} else {
		err = m.WithContext(ctx).Model(&{{.StructName}}{}).First(&data, id).Error
	}
    if err != nil {
        return nil, err
    }

    return &data, nil
}

func (m *{{.DefaultModelName}}) Update(ctx context.Context, data *{{.StructName}}, columns ...string) (*{{.StructName}}, error) {
    if data == nil {
        return nil, nil
    }
	
	var err error
	if len(columns) > 0 {
		err = m.WithContext(ctx).Model(&{{.StructName}}{}).Select(columns).Where("id = ?", data.ID).Updates(data).Error
	} else{
		err = m.WithContext(ctx).Model(&{{.StructName}}{}).Where("id = ?", data.ID).Updates(data).Error
	}

    if err != nil {
        return nil, err
    }

    return data, nil
}

func (m *{{.DefaultModelName}}) Save(ctx context.Context, data *{{.StructName}}) (*{{.StructName}}, error) {
    if data == nil {
        return nil, nil
    }

    err := m.DB.WithContext(ctx).Save(data).Error
    if err != nil {
        return nil, err
    }

    return data, nil
}

func (m *{{.DefaultModelName}}) Delete(ctx context.Context, data *{{.StructName}}) error {
	err := m.DB.WithContext(ctx).Delete(data).Error
    
    return err
}
`

	genCustom = `package {{.PackageName}}

import (
    "gorm.io/gorm"
)

var _ {{.OuterInterfaceName}} = (*custom{{.OuterInterfaceName}})(nil)

type (
    // {{.OuterInterfaceName}} is an interface to be customized, add more methods here,
    // and implement the added methods in custom{{.OuterInterfaceName}}.
    {{.OuterInterfaceName}} interface {
        {{.InnerInterfaceName}}
    }

    custom{{.OuterInterfaceName}} struct {
        *{{.DefaultModelName}}
    }
)

// New{{.OuterInterfaceName}} returns a model for the database table.
func New{{.OuterInterfaceName}}(conn *gorm.DB) {{.OuterInterfaceName}} {
	return &custom{{.OuterInterfaceName}}{
		default{{.OuterInterfaceName}}: new{{.OuterInterfaceName}}(conn),
	}
}

func (m *{{.StructName}}) BeforeCreate(conn *gorm.DB) error {
    // conn.Statement.SetColumn("created_at", time.Now())
    return nil
}

func (m *{{.StructName}}) BeforeUpdate(conn *gorm.DB) (err error) {
    // 如果任意字段有变更
    // if conn.Statement.Changed() {
    //     conn.Statement.SetColumn("updated_at", time.Now())
    // }
    return nil
}

func (m *{{.StructName}}) BeforeDelete(conn *gorm.DB) (err error) {
    return nil
}
`
)

type (
	GenBaseStruct struct {
		PackageName        string
		InnerInterfaceName string
		OuterInterfaceName string
		DefaultModelName   string
		StructName         string
		Columns            []Column
		TableName          string
		GormModel          bool
	}

	Column struct {
		ColumnName string
		ColumnType string
		ColumnTag  string
		Comment    string
	}
)
